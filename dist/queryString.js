"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function relationFetch(schema, relName) {
    var rel = schema.relationships[relName].type;
    var sqlBlock = rel.storeData.sql;
    var otherName = rel.sides[relName].otherName;
    var extraAgg = Object.keys(rel.extras || {}).map(function (extra) { return "'" + extra + "', \"" + sqlBlock.tableName + "\".\"" + extra + "\""; });
    var kv = [
        "'id'", "\"" + sqlBlock.tableName + "\".\"" + sqlBlock.joinFields[otherName] + "\""
    ];
    if (extraAgg.length) {
        kv.push("'meta'", "jsonb_build_object(" + extraAgg.join(',') + ")");
    }
    var where = sqlBlock.joinQuery && sqlBlock.joinQuery[relName]
        ? sqlBlock.joinQuery[relName]
        : "\"" + sqlBlock.tableName + "\".\"" + sqlBlock.joinFields[relName] + "\" = \"" + schema.storeData.sql.tableName + "\".\"" + schema.idAttribute + "\"";
    return "(\n    select array_agg(\n      jsonb_build_object(" + kv.join(', ') + ")\n    )\n    from \"" + sqlBlock.tableName + "\"\n    where " + where + "\n  ) as \"" + relName + "\"";
}
function bulkQuery(schema) {
    var where = "where " + schema.storeData.sql.tableName + "." + schema.idAttribute + " = ?";
    if (schema.storeData && schema.storeData.sql && schema.storeData.sql.bulkQuery) {
        where = schema.storeData.sql.bulkQuery;
    }
    else if (schema.storeData && schema.storeData.sql && schema.storeData.sql.singleQuery) {
        where = schema.storeData.sql.singleQuery;
    }
    var base = ["\"" + schema.storeData.sql.tableName + "\".*"];
    var sides = Object.keys(schema.relationships).map(function (k) { return relationFetch(schema, k); });
    return {
        queryString: "select " + base.concat(sides).join(', ') + " from \"" + schema.storeData.sql.tableName + "\" " + where,
        fields: ['id'],
    };
}
exports.bulkQuery = bulkQuery;
function readQuery(schema) {
    var base = ["\"" + schema.storeData.sql.tableName + "\".*"];
    var sides = Object.keys(schema.relationships).map(function (k) { return relationFetch(schema, k); });
    return {
        queryString: "select " + base.concat(sides).join(', ') + " from \"" + schema.storeData.sql.tableName + "\" where \"" + schema.storeData.sql.tableName + "\".\"" + schema.idAttribute + "\" = ?",
        fields: ['id'],
    };
}
exports.readQuery = readQuery;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QU0sQ0FBQztRQUNMLFdBQVcsRUFBRSxZQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBVSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLFdBQUssS0FBTztRQUN4RyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUM7S0FDZixDQUFDO0FBQ0osQ0FBQztBQWJELDhCQWFDO0FBR0QsbUJBQTBCLE1BQW1CO0lBQzNDLElBQU0sSUFBSSxHQUFHLENBQUMsT0FBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLFNBQUssQ0FBQyxDQUFDO0lBQ3ZELElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQztJQUNyRixNQUFNLENBQUM7UUFDTCxXQUFXLEVBQUUsWUFBVSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQVUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxtQkFBWSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLGFBQU0sTUFBTSxDQUFDLFdBQVcsV0FBTztRQUNySyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUM7S0FDZixDQUFDO0FBQ0osQ0FBQztBQVBELDhCQU9DIiwiZmlsZSI6InF1ZXJ5U3RyaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyYW1ldGVyaXplZFF1ZXJ5IH0gZnJvbSAnLi9zZW1pUXVlcnknO1xuaW1wb3J0IHsgTW9kZWxTY2hlbWEgfSBmcm9tICdwbHVtcCc7XG5cbi8qXG4oXG4gIHNlbGVjdCBhcnJheV9hZ2coXG4gICAganNvbmJfYnVpbGRfb2JqZWN0KCdpZCcsIHByb2ZpbGVfcGVybWlzc2lvbnMuZG9jdW1lbnRfaWQsICdtZXRhJywganNvbmJfYnVpbGRfb2JqZWN0KCdwZXJtJywgcHJvZmlsZV9wZXJtaXNzaW9ucy5wZXJtKSlcbiAgKVxuICBmcm9tIHByb2ZpbGVfcGVybWlzc2lvbnNcbiAgd2hlcmUgcHJvZmlsZV9wZXJtaXNzaW9ucy5wcm9maWxlX2lkID0gcHJvZmlsZXMuaWRcbikgYXMgY29udmVyc2F0aW9uc1xuKi9cblxuZnVuY3Rpb24gcmVsYXRpb25GZXRjaChzY2hlbWE6IE1vZGVsU2NoZW1hLCByZWxOYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgcmVsID0gc2NoZW1hLnJlbGF0aW9uc2hpcHNbcmVsTmFtZV0udHlwZTtcbiAgY29uc3Qgc3FsQmxvY2sgPSByZWwuc3RvcmVEYXRhLnNxbDtcbiAgY29uc3Qgb3RoZXJOYW1lID0gcmVsLnNpZGVzW3JlbE5hbWVdLm90aGVyTmFtZTtcbiAgY29uc3QgZXh0cmFBZ2cgPSBPYmplY3Qua2V5cyhyZWwuZXh0cmFzIHx8IHt9KS5tYXAoZXh0cmEgPT4gYCcke2V4dHJhfScsIFwiJHtzcWxCbG9jay50YWJsZU5hbWV9XCIuXCIke2V4dHJhfVwiYCk7XG4gIGNvbnN0IGt2ID0gW1xuICAgIGAnaWQnYCwgYFwiJHtzcWxCbG9jay50YWJsZU5hbWV9XCIuXCIke3NxbEJsb2NrLmpvaW5GaWVsZHNbb3RoZXJOYW1lXX1cImBcbiAgXTtcbiAgaWYgKGV4dHJhQWdnLmxlbmd0aCkge1xuICAgIGt2LnB1c2goYCdtZXRhJ2AsIGBqc29uYl9idWlsZF9vYmplY3QoJHtleHRyYUFnZy5qb2luKCcsJyl9KWApO1xuICB9XG4gIGNvbnN0IHdoZXJlID0gc3FsQmxvY2suam9pblF1ZXJ5ICYmIHNxbEJsb2NrLmpvaW5RdWVyeVtyZWxOYW1lXVxuICAgID8gc3FsQmxvY2suam9pblF1ZXJ5W3JlbE5hbWVdXG4gICAgOiBgXCIke3NxbEJsb2NrLnRhYmxlTmFtZX1cIi5cIiR7c3FsQmxvY2suam9pbkZpZWxkc1tyZWxOYW1lXX1cIiA9IFwiJHtzY2hlbWEuc3RvcmVEYXRhLnNxbC50YWJsZU5hbWV9XCIuXCIke3NjaGVtYS5pZEF0dHJpYnV0ZX1cImA7XG5cbiAgcmV0dXJuIGAoXG4gICAgc2VsZWN0IGFycmF5X2FnZyhcbiAgICAgIGpzb25iX2J1aWxkX29iamVjdCgke2t2LmpvaW4oJywgJyl9KVxuICAgIClcbiAgICBmcm9tIFwiJHtzcWxCbG9jay50YWJsZU5hbWV9XCJcbiAgICB3aGVyZSAke3doZXJlfVxuICApIGFzIFwiJHtyZWxOYW1lfVwiYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1bGtRdWVyeShzY2hlbWE6IE1vZGVsU2NoZW1hKTogUGFyYW1ldGVyaXplZFF1ZXJ5IHtcbiAgbGV0IHdoZXJlID0gYHdoZXJlICR7c2NoZW1hLnN0b3JlRGF0YS5zcWwudGFibGVOYW1lfS4ke3NjaGVtYS5pZEF0dHJpYnV0ZX0gPSA/YDtcbiAgaWYgKHNjaGVtYS5zdG9yZURhdGEgJiYgc2NoZW1hLnN0b3JlRGF0YS5zcWwgJiYgc2NoZW1hLnN0b3JlRGF0YS5zcWwuYnVsa1F1ZXJ5KSB7XG4gICAgd2hlcmUgPSBzY2hlbWEuc3RvcmVEYXRhLnNxbC5idWxrUXVlcnk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hLnN0b3JlRGF0YSAmJiBzY2hlbWEuc3RvcmVEYXRhLnNxbCAmJiBzY2hlbWEuc3RvcmVEYXRhLnNxbC5zaW5nbGVRdWVyeSkge1xuICAgIHdoZXJlID0gc2NoZW1hLnN0b3JlRGF0YS5zcWwuc2luZ2xlUXVlcnk7XG4gIH1cbiAgY29uc3QgYmFzZSA9IFtgXCIke3NjaGVtYS5zdG9yZURhdGEuc3FsLnRhYmxlTmFtZX1cIi4qYF07XG4gIGNvbnN0IHNpZGVzID0gT2JqZWN0LmtleXMoc2NoZW1hLnJlbGF0aW9uc2hpcHMpLm1hcCgoaykgPT4gcmVsYXRpb25GZXRjaChzY2hlbWEsIGspKTtcbiAgcmV0dXJuIHtcbiAgICBxdWVyeVN0cmluZzogYHNlbGVjdCAke2Jhc2UuY29uY2F0KHNpZGVzKS5qb2luKCcsICcpfSBmcm9tIFwiJHtzY2hlbWEuc3RvcmVEYXRhLnNxbC50YWJsZU5hbWV9XCIgJHt3aGVyZX1gLCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIG1heC1saW5lLWxlbmd0aFxuICAgIGZpZWxkczogWydpZCddLFxuICB9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkUXVlcnkoc2NoZW1hOiBNb2RlbFNjaGVtYSk6IFBhcmFtZXRlcml6ZWRRdWVyeSB7XG4gIGNvbnN0IGJhc2UgPSBbYFwiJHtzY2hlbWEuc3RvcmVEYXRhLnNxbC50YWJsZU5hbWV9XCIuKmBdO1xuICBjb25zdCBzaWRlcyA9IE9iamVjdC5rZXlzKHNjaGVtYS5yZWxhdGlvbnNoaXBzKS5tYXAoKGspID0+IHJlbGF0aW9uRmV0Y2goc2NoZW1hLCBrKSk7XG4gIHJldHVybiB7XG4gICAgcXVlcnlTdHJpbmc6IGBzZWxlY3QgJHtiYXNlLmNvbmNhdChzaWRlcykuam9pbignLCAnKX0gZnJvbSBcIiR7c2NoZW1hLnN0b3JlRGF0YS5zcWwudGFibGVOYW1lfVwiIHdoZXJlIFwiJHtzY2hlbWEuc3RvcmVEYXRhLnNxbC50YWJsZU5hbWV9XCIuXCIke3NjaGVtYS5pZEF0dHJpYnV0ZX1cIiA9ID9gLCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIG1heC1saW5lLWxlbmd0aFxuICAgIGZpZWxkczogWydpZCddLFxuICB9O1xufVxuIl19
