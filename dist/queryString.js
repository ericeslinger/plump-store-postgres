"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function relationFetch(schema, relName) {
    var rel = schema.relationships[relName].type;
    var sqlBlock = rel.storeData.sql;
    var otherName = rel.sides[relName].otherName;
    if (sqlBlock.joinQuery && sqlBlock.joinQuery[relName]) {
        return "(" + sqlBlock.joinQuery[relName] + ") as \"" + relName + "\"";
    }
    else {
        var extraAgg = Object.keys(rel.extras || {}).map(function (extra) { return "'" + extra + "', \"" + sqlBlock.tableName + "\".\"" + extra + "\""; });
        var kv = [
            "'id'", "\"" + sqlBlock.tableName + "\".\"" + sqlBlock.joinFields[otherName] + "\""
        ];
        if (extraAgg.length) {
            kv.push("'meta'", "jsonb_build_object(" + extraAgg.join(',') + ")");
        }
        var where = sqlBlock.joinQuery && sqlBlock.joinQuery[relName]
            ? sqlBlock.joinQuery[relName]
            : "\"" + sqlBlock.tableName + "\".\"" + sqlBlock.joinFields[relName] + "\" = \"" + schema.storeData.sql.tableName + "\".\"" + schema.idAttribute + "\"";
        return ("(\n      select array_agg(\n        jsonb_build_object(" + kv.join(', ') + ")\n      )\n      from \"" + sqlBlock.tableName + "\"\n      where " + where + "\n    ) as \"" + relName + "\"").replace(/\s+/g, ' ');
    }
}
function bulkQuery(schema) {
    var where = "where " + schema.storeData.sql.tableName + "." + schema.idAttribute + " = ?";
    if (schema.storeData && schema.storeData.sql && schema.storeData.sql.bulkQuery) {
        where = schema.storeData.sql.bulkQuery;
    }
    else if (schema.storeData && schema.storeData.sql && schema.storeData.sql.singleQuery) {
        where = schema.storeData.sql.singleQuery;
    }
    var base = ["\"" + schema.storeData.sql.tableName + "\".*"];
    var sides = Object.keys(schema.relationships).map(function (k) { return relationFetch(schema, k); });
    return {
        queryString: ("select " + base.concat(sides).join(', ') + " from \"" + schema.storeData.sql.tableName + "\" " + where).replace(/\s+/g, ' '),
        fields: ['id'],
    };
}
exports.bulkQuery = bulkQuery;
function readQuery(schema) {
    var base = ["\"" + schema.storeData.sql.tableName + "\".*"];
    var sides = Object.keys(schema.relationships).map(function (k) { return relationFetch(schema, k); });
    return {
        queryString: "select " + base.concat(sides).join(', ') + " from \"" + schema.storeData.sql.tableName + "\" where \"" + schema.storeData.sql.tableName + "\".\"" + schema.idAttribute + "\" = ?",
        fields: ['id'],
    };
}
exports.readQuery = readQuery;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QVMsYUFBTSxNQUFNLENBQUMsV0FBVyxXQUFPO1FBQ3JLLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQztLQUNmLENBQUM7QUFDSixDQUFDO0FBUEQsOEJBT0MiLCJmaWxlIjoicXVlcnlTdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJhbWV0ZXJpemVkUXVlcnkgfSBmcm9tICcuL3NlbWlRdWVyeSc7XG5pbXBvcnQgeyBNb2RlbFNjaGVtYSB9IGZyb20gJ3BsdW1wJztcblxuLypcbihcbiAgc2VsZWN0IGFycmF5X2FnZyhcbiAgICBqc29uYl9idWlsZF9vYmplY3QoJ2lkJywgcHJvZmlsZV9wZXJtaXNzaW9ucy5kb2N1bWVudF9pZCwgJ21ldGEnLCBqc29uYl9idWlsZF9vYmplY3QoJ3Blcm0nLCBwcm9maWxlX3Blcm1pc3Npb25zLnBlcm0pKVxuICApXG4gIGZyb20gcHJvZmlsZV9wZXJtaXNzaW9uc1xuICB3aGVyZSBwcm9maWxlX3Blcm1pc3Npb25zLnByb2ZpbGVfaWQgPSBwcm9maWxlcy5pZFxuKSBhcyBjb252ZXJzYXRpb25zXG4qL1xuXG5mdW5jdGlvbiByZWxhdGlvbkZldGNoKHNjaGVtYTogTW9kZWxTY2hlbWEsIHJlbE5hbWU6IHN0cmluZykge1xuICBjb25zdCByZWwgPSBzY2hlbWEucmVsYXRpb25zaGlwc1tyZWxOYW1lXS50eXBlO1xuICBjb25zdCBzcWxCbG9jayA9IHJlbC5zdG9yZURhdGEuc3FsO1xuICBjb25zdCBvdGhlck5hbWUgPSByZWwuc2lkZXNbcmVsTmFtZV0ub3RoZXJOYW1lO1xuICBpZiAoc3FsQmxvY2suam9pblF1ZXJ5ICYmIHNxbEJsb2NrLmpvaW5RdWVyeVtyZWxOYW1lXSkge1xuICAgIHJldHVybiBgKCR7c3FsQmxvY2suam9pblF1ZXJ5W3JlbE5hbWVdfSkgYXMgXCIke3JlbE5hbWV9XCJgO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGV4dHJhQWdnID0gT2JqZWN0LmtleXMocmVsLmV4dHJhcyB8fCB7fSkubWFwKGV4dHJhID0+IGAnJHtleHRyYX0nLCBcIiR7c3FsQmxvY2sudGFibGVOYW1lfVwiLlwiJHtleHRyYX1cImApO1xuICAgIGNvbnN0IGt2ID0gW1xuICAgICAgYCdpZCdgLCBgXCIke3NxbEJsb2NrLnRhYmxlTmFtZX1cIi5cIiR7c3FsQmxvY2suam9pbkZpZWxkc1tvdGhlck5hbWVdfVwiYFxuICAgIF07XG4gICAgaWYgKGV4dHJhQWdnLmxlbmd0aCkge1xuICAgICAga3YucHVzaChgJ21ldGEnYCwgYGpzb25iX2J1aWxkX29iamVjdCgke2V4dHJhQWdnLmpvaW4oJywnKX0pYCk7XG4gICAgfVxuICAgIGNvbnN0IHdoZXJlID0gc3FsQmxvY2suam9pblF1ZXJ5ICYmIHNxbEJsb2NrLmpvaW5RdWVyeVtyZWxOYW1lXVxuICAgID8gc3FsQmxvY2suam9pblF1ZXJ5W3JlbE5hbWVdXG4gICAgOiBgXCIke3NxbEJsb2NrLnRhYmxlTmFtZX1cIi5cIiR7c3FsQmxvY2suam9pbkZpZWxkc1tyZWxOYW1lXX1cIiA9IFwiJHtzY2hlbWEuc3RvcmVEYXRhLnNxbC50YWJsZU5hbWV9XCIuXCIke3NjaGVtYS5pZEF0dHJpYnV0ZX1cImA7XG4gICAgcmV0dXJuIGAoXG4gICAgICBzZWxlY3QgYXJyYXlfYWdnKFxuICAgICAgICBqc29uYl9idWlsZF9vYmplY3QoJHtrdi5qb2luKCcsICcpfSlcbiAgICAgIClcbiAgICAgIGZyb20gXCIke3NxbEJsb2NrLnRhYmxlTmFtZX1cIlxuICAgICAgd2hlcmUgJHt3aGVyZX1cbiAgICApIGFzIFwiJHtyZWxOYW1lfVwiYC5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1bGtRdWVyeShzY2hlbWE6IE1vZGVsU2NoZW1hKTogUGFyYW1ldGVyaXplZFF1ZXJ5IHtcbiAgbGV0IHdoZXJlID0gYHdoZXJlICR7c2NoZW1hLnN0b3JlRGF0YS5zcWwudGFibGVOYW1lfS4ke3NjaGVtYS5pZEF0dHJpYnV0ZX0gPSA/YDtcbiAgaWYgKHNjaGVtYS5zdG9yZURhdGEgJiYgc2NoZW1hLnN0b3JlRGF0YS5zcWwgJiYgc2NoZW1hLnN0b3JlRGF0YS5zcWwuYnVsa1F1ZXJ5KSB7XG4gICAgd2hlcmUgPSBzY2hlbWEuc3RvcmVEYXRhLnNxbC5idWxrUXVlcnk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hLnN0b3JlRGF0YSAmJiBzY2hlbWEuc3RvcmVEYXRhLnNxbCAmJiBzY2hlbWEuc3RvcmVEYXRhLnNxbC5zaW5nbGVRdWVyeSkge1xuICAgIHdoZXJlID0gc2NoZW1hLnN0b3JlRGF0YS5zcWwuc2luZ2xlUXVlcnk7XG4gIH1cbiAgY29uc3QgYmFzZSA9IFtgXCIke3NjaGVtYS5zdG9yZURhdGEuc3FsLnRhYmxlTmFtZX1cIi4qYF07XG4gIGNvbnN0IHNpZGVzID0gT2JqZWN0LmtleXMoc2NoZW1hLnJlbGF0aW9uc2hpcHMpLm1hcCgoaykgPT4gcmVsYXRpb25GZXRjaChzY2hlbWEsIGspKTtcbiAgcmV0dXJuIHtcbiAgICBxdWVyeVN0cmluZzogYHNlbGVjdCAke2Jhc2UuY29uY2F0KHNpZGVzKS5qb2luKCcsICcpfSBmcm9tIFwiJHtzY2hlbWEuc3RvcmVEYXRhLnNxbC50YWJsZU5hbWV9XCIgJHt3aGVyZX1gLnJlcGxhY2UoL1xccysvZywgJyAnKSwgLy8gdHNsaW50OmRpc2FibGUtbGluZSBtYXgtbGluZS1sZW5ndGhcbiAgICBmaWVsZHM6IFsnaWQnXSxcbiAgfTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZFF1ZXJ5KHNjaGVtYTogTW9kZWxTY2hlbWEpOiBQYXJhbWV0ZXJpemVkUXVlcnkge1xuICBjb25zdCBiYXNlID0gW2BcIiR7c2NoZW1hLnN0b3JlRGF0YS5zcWwudGFibGVOYW1lfVwiLipgXTtcbiAgY29uc3Qgc2lkZXMgPSBPYmplY3Qua2V5cyhzY2hlbWEucmVsYXRpb25zaGlwcykubWFwKChrKSA9PiByZWxhdGlvbkZldGNoKHNjaGVtYSwgaykpO1xuICByZXR1cm4ge1xuICAgIHF1ZXJ5U3RyaW5nOiBgc2VsZWN0ICR7YmFzZS5jb25jYXQoc2lkZXMpLmpvaW4oJywgJyl9IGZyb20gXCIke3NjaGVtYS5zdG9yZURhdGEuc3FsLnRhYmxlTmFtZX1cIiB3aGVyZSBcIiR7c2NoZW1hLnN0b3JlRGF0YS5zcWwudGFibGVOYW1lfVwiLlwiJHtzY2hlbWEuaWRBdHRyaWJ1dGV9XCIgPSA/YCwgLy8gdHNsaW50OmRpc2FibGUtbGluZSBtYXgtbGluZS1sZW5ndGhcbiAgICBmaWVsZHM6IFsnaWQnXSxcbiAgfTtcbn1cbiJdfQ==
