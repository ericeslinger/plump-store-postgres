"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function selects(schema) {
    var selectArray = [];
    for (var attrName in schema.attributes) {
        selectArray.push("\"" + schema.storeData.sql.tableName + "\".\"" + attrName + "\"");
    }
    for (var relName in schema.relationships) {
        var rel = schema.relationships[relName].type;
        var otherName = rel.sides[relName].otherName;
        var otherFieldName = rel.storeData.sql.joinFields[otherName];
        var extraAgg = [];
        if (rel.extras) {
            for (var extra in rel.extras) {
                extraAgg.push("'" + extra + "'", "\"" + relName + "\".\"" + extra + "\"");
            }
        }
        var extraString = ", 'meta', jsonb_build_object(" + extraAgg.join(', ') + ")";
        selectArray.push("COALESCE(\n        array_agg(\n          distinct(\n            jsonb_build_object(\n              'id', \"" + relName + "\".\"" + otherFieldName + "\"\n              " + (extraAgg.length ? extraString : '') + "\n            )\n          )\n        )\n        FILTER (WHERE \"" + relName + "\".\"" + otherFieldName + "\" IS NOT NULL),\n        '{}')\n      as \"" + relName + "\"");
    }
    return "select " + selectArray.join(', ');
}
function joins(schema) {
    var joinStrings = [];
    for (var relName in schema.relationships) {
        var rel = schema.relationships[relName].type;
        var sqlBlock = rel.storeData.sql;
        if (sqlBlock.joinQuery) {
            joinStrings.push("left outer join " + rel.storeData.sql.tableName + " as \"" + relName + "\" " + sqlBlock.joinQuery[relName]);
        }
        else {
            joinStrings.push("left outer join " + rel.storeData.sql.tableName + " as \"" + relName + "\" "
                + ("on \"" + relName + "\"." + sqlBlock.joinFields[relName] + " = " + schema.storeData.sql.tableName + "." + schema.idAttribute));
        }
    }
    return joinStrings.join('\n');
}
function singleWhere(schema) {
    if (schema.storeData && schema.storeData.sql && schema.storeData.sql.singleQuery) {
        return schema.storeData.sql.singleQuery;
    }
    else {
        return "where " + schema.storeData.sql.tableName + "." + schema.idAttribute + " = ?";
    }
}
function bulkWhere(schema) {
    if (schema.storeData && schema.storeData.sql && schema.storeData.sql.bulkQuery) {
        return schema.storeData.sql.bulkQuery;
    }
    else if (schema.storeData && schema.storeData.sql && schema.storeData.sql.singleQuery) {
        return schema.storeData.sql.singleQuery;
    }
    else {
        return "where " + schema.storeData.sql.tableName + "." + schema.idAttribute + " = ?";
    }
}
function groupBy(schema) {
    return "group by " + Object.keys(schema.attributes).map(function (attrName) { return "\"" + attrName + "\""; }).join(', ');
}
function bulkQuery(schema) {
    return {
        queryString: selects(schema) + " \nfrom " + schema.storeData.sql.tableName + " \n" + joins(schema) + " \n" + bulkWhere(schema) + " \n" + groupBy(schema) + ";",
        fields: ['id']
    };
}
exports.bulkQuery = bulkQuery;
function readQuery(schema) {
    return {
        queryString: selects(schema) + " \nfrom " + schema.storeData.sql.tableName + " \n" + joins(schema) + " \n" + singleWhere(schema) + " \n" + groupBy(schema) + ";",
        fields: ['id'],
    };
}
exports.readQuery = readQuery;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
