"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function relationFetch(schema, relName) {
    var rel = schema.relationships[relName].type;
    var sqlBlock = rel.storeData.sql;
    var otherName = rel.sides[relName].otherName;
    if (sqlBlock.joinQuery && sqlBlock.joinQuery[relName]) {
        return "(" + sqlBlock.joinQuery[relName] + ") as \"" + relName + "\"";
    }
    else {
        var extraAgg = Object.keys(rel.extras || {}).map(function (extra) { return "'" + extra + "', \"" + sqlBlock.tableName + "\".\"" + extra + "\""; });
        var kv = [
            "'id'",
            "\"" + sqlBlock.tableName + "\".\"" + sqlBlock.joinFields[otherName] + "\"",
        ];
        if (extraAgg.length) {
            kv.push("'meta'", "jsonb_build_object(" + extraAgg.join(',') + ")");
        }
        var where = sqlBlock.joinQuery && sqlBlock.joinQuery[relName]
            ? sqlBlock.joinQuery[relName]
            : "\"" + sqlBlock.tableName + "\".\"" + sqlBlock.joinFields[relName] + "\" = \"" + schema
                .storeData.sql.tableName + "\".\"" + schema.idAttribute + "\"";
        return ("(\n      select array_agg(\n        jsonb_build_object(" + kv.join(', ') + ")\n      )\n      from \"" + sqlBlock.tableName + "\"\n      where " + where + "\n    ) as \"" + relName + "\"").replace(/\s+/g, ' ');
    }
}
function bulkQuery(schema) {
    var where = "where " + schema.storeData.sql
        .tableName + "." + schema.idAttribute + " = ?";
    if (schema.storeData &&
        schema.storeData.sql &&
        schema.storeData.sql.bulkQuery) {
        where = schema.storeData.sql.bulkQuery;
    }
    else if (schema.storeData &&
        schema.storeData.sql &&
        schema.storeData.sql.singleQuery) {
        where = schema.storeData.sql.singleQuery;
    }
    var base = ["\"" + schema.storeData.sql.tableName + "\".*"];
    var sides = Object.keys(schema.relationships).map(function (k) {
        return relationFetch(schema, k);
    });
    return {
        queryString: ("select " + base.concat(sides).join(', ') + " from \"" + schema
            .storeData.sql.tableName + "\" " + where).replace(/\s+/g, ' '),
        fields: ['id'],
    };
}
exports.bulkQuery = bulkQuery;
function readQuery(schema) {
    var base = ["\"" + schema.storeData.sql.tableName + "\".*"];
    var sides = Object.keys(schema.relationships).map(function (k) {
        return relationFetch(schema, k);
    });
    return {
        queryString: "select " + base.concat(sides).join(', ') + " from \"" + schema
            .storeData.sql.tableName + "\" where \"" + schema.storeData.sql
            .tableName + "\".\"" + schema.idAttribute + "\" = ?",
        fields: ['id'],
    };
}
exports.readQuery = readQuery;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxHQUFHO2FBQ3ZELFNBQVMsYUFBTSxNQUFNLENBQUMsV0FBVyxXQUFPO1FBQzNDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQztLQUNmLENBQUM7QUFDSixDQUFDO0FBWEQsOEJBV0MiLCJmaWxlIjoicXVlcnlTdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJhbWV0ZXJpemVkUXVlcnkgfSBmcm9tICcuL3NlbWlRdWVyeSc7XG5pbXBvcnQgeyBNb2RlbFNjaGVtYSB9IGZyb20gJ3BsdW1wJztcblxuZnVuY3Rpb24gcmVsYXRpb25GZXRjaChzY2hlbWE6IE1vZGVsU2NoZW1hLCByZWxOYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgcmVsID0gc2NoZW1hLnJlbGF0aW9uc2hpcHNbcmVsTmFtZV0udHlwZTtcbiAgY29uc3Qgc3FsQmxvY2sgPSByZWwuc3RvcmVEYXRhLnNxbDtcbiAgY29uc3Qgb3RoZXJOYW1lID0gcmVsLnNpZGVzW3JlbE5hbWVdLm90aGVyTmFtZTtcbiAgaWYgKHNxbEJsb2NrLmpvaW5RdWVyeSAmJiBzcWxCbG9jay5qb2luUXVlcnlbcmVsTmFtZV0pIHtcbiAgICByZXR1cm4gYCgke3NxbEJsb2NrLmpvaW5RdWVyeVtyZWxOYW1lXX0pIGFzIFwiJHtyZWxOYW1lfVwiYDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBleHRyYUFnZyA9IE9iamVjdC5rZXlzKHJlbC5leHRyYXMgfHwge30pLm1hcChcbiAgICAgIGV4dHJhID0+IGAnJHtleHRyYX0nLCBcIiR7c3FsQmxvY2sudGFibGVOYW1lfVwiLlwiJHtleHRyYX1cImAsXG4gICAgKTtcbiAgICBjb25zdCBrdiA9IFtcbiAgICAgIGAnaWQnYCxcbiAgICAgIGBcIiR7c3FsQmxvY2sudGFibGVOYW1lfVwiLlwiJHtzcWxCbG9jay5qb2luRmllbGRzW290aGVyTmFtZV19XCJgLFxuICAgIF07XG4gICAgaWYgKGV4dHJhQWdnLmxlbmd0aCkge1xuICAgICAga3YucHVzaChgJ21ldGEnYCwgYGpzb25iX2J1aWxkX29iamVjdCgke2V4dHJhQWdnLmpvaW4oJywnKX0pYCk7XG4gICAgfVxuICAgIGNvbnN0IHdoZXJlID1cbiAgICAgIHNxbEJsb2NrLmpvaW5RdWVyeSAmJiBzcWxCbG9jay5qb2luUXVlcnlbcmVsTmFtZV1cbiAgICAgICAgPyBzcWxCbG9jay5qb2luUXVlcnlbcmVsTmFtZV1cbiAgICAgICAgOiBgXCIke3NxbEJsb2NrLnRhYmxlTmFtZX1cIi5cIiR7c3FsQmxvY2suam9pbkZpZWxkc1tyZWxOYW1lXX1cIiA9IFwiJHtzY2hlbWFcbiAgICAgICAgICAgIC5zdG9yZURhdGEuc3FsLnRhYmxlTmFtZX1cIi5cIiR7c2NoZW1hLmlkQXR0cmlidXRlfVwiYDtcbiAgICByZXR1cm4gYChcbiAgICAgIHNlbGVjdCBhcnJheV9hZ2coXG4gICAgICAgIGpzb25iX2J1aWxkX29iamVjdCgke2t2LmpvaW4oJywgJyl9KVxuICAgICAgKVxuICAgICAgZnJvbSBcIiR7c3FsQmxvY2sudGFibGVOYW1lfVwiXG4gICAgICB3aGVyZSAke3doZXJlfVxuICAgICkgYXMgXCIke3JlbE5hbWV9XCJgLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVsa1F1ZXJ5KHNjaGVtYTogTW9kZWxTY2hlbWEpOiBQYXJhbWV0ZXJpemVkUXVlcnkge1xuICBsZXQgd2hlcmUgPSBgd2hlcmUgJHtzY2hlbWEuc3RvcmVEYXRhLnNxbFxuICAgIC50YWJsZU5hbWV9LiR7c2NoZW1hLmlkQXR0cmlidXRlfSA9ID9gO1xuICBpZiAoXG4gICAgc2NoZW1hLnN0b3JlRGF0YSAmJlxuICAgIHNjaGVtYS5zdG9yZURhdGEuc3FsICYmXG4gICAgc2NoZW1hLnN0b3JlRGF0YS5zcWwuYnVsa1F1ZXJ5XG4gICkge1xuICAgIHdoZXJlID0gc2NoZW1hLnN0b3JlRGF0YS5zcWwuYnVsa1F1ZXJ5O1xuICB9IGVsc2UgaWYgKFxuICAgIHNjaGVtYS5zdG9yZURhdGEgJiZcbiAgICBzY2hlbWEuc3RvcmVEYXRhLnNxbCAmJlxuICAgIHNjaGVtYS5zdG9yZURhdGEuc3FsLnNpbmdsZVF1ZXJ5XG4gICkge1xuICAgIHdoZXJlID0gc2NoZW1hLnN0b3JlRGF0YS5zcWwuc2luZ2xlUXVlcnk7XG4gIH1cbiAgY29uc3QgYmFzZSA9IFtgXCIke3NjaGVtYS5zdG9yZURhdGEuc3FsLnRhYmxlTmFtZX1cIi4qYF07XG4gIGNvbnN0IHNpZGVzID0gT2JqZWN0LmtleXMoc2NoZW1hLnJlbGF0aW9uc2hpcHMpLm1hcChrID0+XG4gICAgcmVsYXRpb25GZXRjaChzY2hlbWEsIGspLFxuICApO1xuICByZXR1cm4ge1xuICAgIHF1ZXJ5U3RyaW5nOiBgc2VsZWN0ICR7YmFzZS5jb25jYXQoc2lkZXMpLmpvaW4oJywgJyl9IGZyb20gXCIke3NjaGVtYVxuICAgICAgLnN0b3JlRGF0YS5zcWwudGFibGVOYW1lfVwiICR7d2hlcmV9YC5yZXBsYWNlKC9cXHMrL2csICcgJyksIC8vIHRzbGludDpkaXNhYmxlLWxpbmUgbWF4LWxpbmUtbGVuZ3RoXG4gICAgZmllbGRzOiBbJ2lkJ10sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkUXVlcnkoc2NoZW1hOiBNb2RlbFNjaGVtYSk6IFBhcmFtZXRlcml6ZWRRdWVyeSB7XG4gIGNvbnN0IGJhc2UgPSBbYFwiJHtzY2hlbWEuc3RvcmVEYXRhLnNxbC50YWJsZU5hbWV9XCIuKmBdO1xuICBjb25zdCBzaWRlcyA9IE9iamVjdC5rZXlzKHNjaGVtYS5yZWxhdGlvbnNoaXBzKS5tYXAoayA9PlxuICAgIHJlbGF0aW9uRmV0Y2goc2NoZW1hLCBrKSxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBxdWVyeVN0cmluZzogYHNlbGVjdCAke2Jhc2UuY29uY2F0KHNpZGVzKS5qb2luKCcsICcpfSBmcm9tIFwiJHtzY2hlbWFcbiAgICAgIC5zdG9yZURhdGEuc3FsLnRhYmxlTmFtZX1cIiB3aGVyZSBcIiR7c2NoZW1hLnN0b3JlRGF0YS5zcWxcbiAgICAgIC50YWJsZU5hbWV9XCIuXCIke3NjaGVtYS5pZEF0dHJpYnV0ZX1cIiA9ID9gLCAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lIG1heC1saW5lLWxlbmd0aFxuICAgIGZpZWxkczogWydpZCddLFxuICB9O1xufVxuIl19
