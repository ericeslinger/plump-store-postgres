"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pg = require("pg");
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
var mergeOptions = require("merge-options");
require("mocha");
var index_1 = require("../src/index");
var testType_1 = require("./testType");
var storageTests_1 = require("./storageTests");
chai.use(chaiAsPromised);
var expect = chai.expect;
function runSQL(command, opts) {
    if (opts === void 0) { opts = {}; }
    var connOptions = Object.assign({}, {
        user: 'postgres',
        host: 'localhost',
        port: 5432,
        database: 'postgres',
        charset: 'utf8',
    }, opts);
    var client = new pg.Client(connOptions);
    return new Promise(function (resolve) {
        client.connect(function (err) {
            if (err) {
                throw err;
            }
            client.query(command, function (err) {
                if (err) {
                    throw err;
                }
                client.end(function (err) {
                    if (err) {
                        throw err;
                    }
                    resolve();
                });
            });
        });
    });
}
function createDatabase(name) {
    return runSQL("DROP DATABASE if exists " + name + ";")
        .then(function () { return runSQL("CREATE DATABASE " + name + ";"); })
        .then(function () {
        return runSQL("\n      CREATE SEQUENCE testid_seq\n        START WITH 1\n        INCREMENT BY 1\n        NO MINVALUE\n        MAXVALUE 2147483647\n        CACHE 1\n        CYCLE;\n      CREATE TABLE tests (\n        id integer not null primary key DEFAULT nextval('testid_seq'::regclass),\n        name text,\n        \"otherName\" text,\n        extended jsonb not null default '{}'::jsonb\n      );\n      CREATE TABLE parent_child_relationship (parent_id integer not null, child_id integer not null);\n      CREATE UNIQUE INDEX children_join on parent_child_relationship (parent_id, child_id);\n      CREATE TABLE valence_children (parent_id integer not null, child_id integer not null, perm integer not null);\n      CREATE UNIQUE INDEX valence_children_join on valence_children (parent_id, child_id);\n      CREATE TABLE query_children (parent_id integer not null, child_id integer not null, perm integer not null);\n      CREATE UNIQUE INDEX query_children_join on query_children (parent_id, child_id);\n    ", { database: name });
    });
}
storageTests_1.testSuite({
    describe: describe, it: it, before: before, after: after,
}, {
    ctor: index_1.PGStore,
    opts: {
        sql: {
            connection: {
                database: 'plump_test',
                user: 'postgres',
                host: 'localhost',
                port: 5432,
            },
        },
        terminal: true,
    },
    name: 'Plump Postgres Store',
    before: function () { return createDatabase('plump_test'); },
    after: function (driver) {
        return driver.teardown()
            .then(function () { return runSQL('DROP DATABASE plump_test;'); });
    },
});
var sampleObject = {
    typeName: 'tests',
    attributes: {
        name: 'potato',
        otherName: 'elephantine',
        extended: {
            actual: 'rutabaga',
            otherValue: 42,
        },
    },
};
describe('postgres-specific behaviors', function () {
    var store;
    before(function () {
        return createDatabase('secondary_plump_test')
            .then(function () {
            store = new index_1.PGStore({
                sql: {
                    connection: {
                        database: 'secondary_plump_test',
                        user: 'postgres',
                        host: 'localhost',
                        port: 5432,
                    },
                },
                terminal: true,
            });
            return store.addSchema(testType_1.TestType);
        });
    });
    it('Returns extra contents', function () {
        return store.writeAttributes(sampleObject)
            .then(function (createdObject) {
            return store.writeRelationshipItem(createdObject, 'valenceChildren', { id: 100, meta: { perm: 1 } })
                .then(function () { return store.writeRelationshipItem(createdObject, 'queryChildren', { id: 101, meta: { perm: 1 } }); })
                .then(function () { return store.writeRelationshipItem(createdObject, 'queryChildren', { id: 102, meta: { perm: 2 } }); })
                .then(function () { return store.writeRelationshipItem(createdObject, 'queryChildren', { id: 103, meta: { perm: 3 } }); })
                .then(function () {
                var resultObject = mergeOptions({}, createdObject, {
                    relationships: {
                        queryChildren: [
                            { id: 102, meta: { perm: 2 } },
                            { id: 103, meta: { perm: 3 } },
                        ],
                        queryParents: [],
                        valenceChildren: [
                            { id: 100, meta: { perm: 1 } },
                        ],
                        valenceParents: [],
                        children: [],
                        parents: [],
                    }
                });
                return store.read(createdObject)
                    .then(function (res) {
                    return expect(res).to.deep.equal(resultObject);
                });
            });
        });
    });
    it('supports all hasMany relationships', function () {
        return store.writeAttributes(sampleObject)
            .then(function (createdObject) {
            return store.writeRelationshipItem(createdObject, 'queryChildren', { id: 101, meta: { perm: 1 } })
                .then(function () { return store.writeRelationshipItem(createdObject, 'queryChildren', { id: 102, meta: { perm: 2 } }); })
                .then(function () { return store.writeRelationshipItem(createdObject, 'queryChildren', { id: 103, meta: { perm: 3 } }); })
                .then(function () { return store.writeRelationshipItem(createdObject, 'children', { id: 102 }); })
                .then(function () { return store.writeRelationshipItem(createdObject, 'children', { id: 103 }); })
                .then(function () { return store.writeRelationshipItem(createdObject, 'valenceChildren', { id: 102, meta: { perm: 20 } }); })
                .then(function () { return store.writeRelationshipItem(createdObject, 'valenceChildren', { id: 103, meta: { perm: 30 } }); })
                .then(function () { return store.readRelationship(createdObject, 'relationships.queryChildren'); })
                .then(function (v) { return expect(v.relationships.queryChildren).to.deep.equal([{ id: 102, meta: { perm: 2 } }, { id: 103, meta: { perm: 3 } }]); })
                .then(function () { return store.readRelationship(createdObject, 'relationships.children'); })
                .then(function (v) { return expect(v.relationships.children).to.deep.equal([{ id: 102 }, { id: 103 }]); })
                .then(function () { return store.readRelationship(createdObject, 'relationships.valenceChildren'); })
                .then(function (v) { return expect(v.relationships.valenceChildren).to.deep.equal([{ id: 102, meta: { perm: 20 } }, { id: 103, meta: { perm: 30 } }]); });
        });
    });
    it('returns many objects in a bulk Query', function () {
        return Promise.all([
            store.writeAttributes(sampleObject),
            store.writeAttributes(sampleObject),
            store.writeAttributes(sampleObject),
            store.writeAttributes(sampleObject),
            store.writeAttributes(sampleObject),
        ])
            .then(function (created) {
            var createdObject = created[0];
            return Promise.all(created.map(function (obj) {
                return Promise.all([
                    store.writeRelationshipItem(obj, 'children', { id: obj.id * 100 + 1 }),
                    store.writeRelationshipItem(obj, 'children', { id: obj.id * 100 + 2 }),
                    store.writeRelationshipItem(obj, 'children', { id: obj.id * 100 + 3 }),
                ]);
            }))
                .then(function () { return store.bulkRead(createdObject); })
                .then(function (res) {
                expect(res).to.have.property('included').with.length(4);
                res.included.forEach(function (i) {
                    expect(i.relationships.children).to.deep.equal([
                        { id: i.id * 100 + 1 },
                        { id: i.id * 100 + 2 },
                        { id: i.id * 100 + 3 },
                    ]);
                });
            });
        });
    });
    after(function () {
        return store.teardown()
            .then(function () { return runSQL('DROP DATABASE secondary_plump_test;'); });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
