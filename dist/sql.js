"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var knex = require("knex");
var plump_1 = require("plump");
var queryString_1 = require("./queryString");
var writeRelationshipQuery_1 = require("./writeRelationshipQuery");
function rearrangeData(type, data) {
    var retVal = {
        type: type.name,
        attributes: {},
        relationships: {},
        id: data[type.idAttribute],
    };
    for (var attrName in type.attributes) {
        retVal.attributes[attrName] = data[attrName];
    }
    for (var relName in type.relationships) {
        retVal.relationships[relName] = data[relName] || [];
    }
    return retVal;
}
var PGStore = (function (_super) {
    __extends(PGStore, _super);
    function PGStore(opts) {
        if (opts === void 0) { opts = {}; }
        var _this = _super.call(this, opts) || this;
        _this.queryCache = {};
        var options = Object.assign({}, {
            client: 'postgres',
            debug: false,
            connection: {
                user: 'postgres',
                host: 'localhost',
                port: 5432,
                password: '',
                charset: 'utf8',
            },
            pool: {
                max: 20,
                min: 0,
            },
        }, opts.sql);
        _this.knex = knex(options);
        return _this;
    }
    PGStore.prototype.teardown = function () {
        return Promise.resolve(this.knex.destroy());
    };
    PGStore.prototype.allocateId = function (type) {
        return Promise.resolve(this.knex
            .raw('select nextval(?::regclass);', type + "_id_seq")
            .then(function (data) { return data.rows[0].nextval; }));
    };
    PGStore.prototype.addSchema = function (t) {
        var _this = this;
        return _super.prototype.addSchema.call(this, t).then(function () {
            _this.queryCache[t.type] = {
                attributes: queryString_1.readQuery(t.schema),
                bulkRead: queryString_1.bulkQuery(t.schema),
                relationships: {},
            };
            Object.keys(t.schema.relationships).forEach(function (relName) {
                _this.queryCache[t.type].relationships[relName] = writeRelationshipQuery_1.writeRelationshipQuery(t.schema, relName);
            });
        });
    };
    PGStore.prototype.writeAttributes = function (value) {
        var _this = this;
        var updateObject = this.validateInput(value);
        var typeInfo = this.getSchema(value.type);
        return Promise.resolve()
            .then(function () {
            if (updateObject.id === undefined && _this.terminal) {
                return _this.knex(typeInfo.storeData.sql.tableName)
                    .insert(updateObject.attributes)
                    .returning(typeInfo.idAttribute)
                    .then(function (createdId) {
                    return _this.readAttributes({ type: value.type, id: createdId });
                });
            }
            else if (updateObject.id !== undefined) {
                return _this.knex(updateObject.type)
                    .where((_a = {}, _a[typeInfo.idAttribute] = updateObject.id, _a))
                    .update(updateObject.attributes)
                    .then(function () {
                    return _this.readAttributes({
                        type: value.type,
                        id: updateObject.id,
                    });
                });
            }
            else {
                throw new Error('Cannot create new content in a non-terminal store');
            }
            var _a;
        })
            .then(function (result) {
            _this.fireWriteUpdate(Object.assign({}, result, { invalidate: ['attributes'] }));
            return result;
        });
    };
    PGStore.prototype.readAttributes = function (value) {
        var _this = this;
        return Promise.resolve(this.knex
            .raw(this.queryCache[value.type].attributes.queryString, value.id)
            .then(function (o) {
            if (o.rows[0]) {
                return rearrangeData(_this.getSchema(value.type), o.rows[0]);
            }
            else {
                return null;
            }
        }));
    };
    PGStore.prototype.bulkRead = function (item) {
        var schema = this.getSchema(item.type);
        var query = this.queryCache[item.type].bulkRead;
        return Promise.resolve(this.knex.raw(query.queryString, item.id).then(function (o) {
            if (o.rows[0]) {
                var arrangedArray = o.rows.map(function (row) { return rearrangeData(schema, row); });
                var rootItem = arrangedArray.filter(function (it) { return it.id === item.id; })[0];
                rootItem.included = arrangedArray.filter(function (it) { return it.id !== item.id; });
                return rootItem;
            }
            else {
                return null;
            }
        }));
    };
    PGStore.prototype.readRelationship = function (value, relRefName) {
        var relName = relRefName.indexOf('relationships.') === 0
            ? relRefName.split('.')[1]
            : relRefName;
        var schema = this.getSchema(value.type);
        var rel = schema.relationships[relName].type;
        var otherRelName = rel.sides[relName].otherName;
        var sqlData = rel.storeData.sql;
        var selectBase = "\"" + sqlData.tableName + "\".\"" + sqlData.joinFields[otherRelName] + "\" as id";
        var selectExtras = '';
        if (rel.extras) {
            selectExtras = ", jsonb_build_object(" + Object.keys(rel.extras)
                .map(function (extra) { return "'" + extra + "', \"" + sqlData.tableName + "\".\"" + extra + "\""; })
                .join(', ') + ") as meta";
        }
        var where = sqlData.where === undefined
            ? (_a = {}, _a[sqlData.joinFields[relName]] = value.id, _a) : this.knex.raw(sqlData.where[relName], value.id);
        return Promise.resolve(this.knex(sqlData.tableName)
            .as(relName)
            .where(where)
            .select(this.knex.raw("" + selectBase + selectExtras))
            .then(function (l) {
            return {
                type: value.type,
                id: value.id,
                relationships: (_a = {},
                    _a[relName] = l,
                    _a),
            };
            var _a;
        }));
        var _a;
    };
    PGStore.prototype.delete = function (value) {
        var _this = this;
        var schema = this.getSchema(value.type);
        return Promise.resolve(this.knex(schema.storeData.sql.tableName)
            .where((_a = {}, _a[schema.idAttribute] = value.id, _a))
            .delete()
            .then(function (o) {
            _this.fireWriteUpdate({
                id: value.id,
                type: value.type,
                invalidate: ['attributes', 'relationships'],
            });
            return o;
        }));
        var _a;
    };
    PGStore.prototype.writeRelationshipItem = function (value, relName, child) {
        var _this = this;
        var subQuery = this.queryCache[value.type].relationships[relName];
        var schema = this.getSchema(value.type);
        var childData = schema.relationships[relName].type.sides[relName];
        return Promise.resolve(this.knex
            .raw(subQuery.queryString, subQuery.fields.map(function (f) {
            if (f === 'item.id') {
                return value.id;
            }
            else if (f === 'child.id') {
                return child.id;
            }
            else {
                return child.meta[f];
            }
        }))
            .then(function () {
            _this.fireWriteUpdate(Object.assign({}, value, {
                invalidate: ["relationships." + relName],
            }));
            _this.fireWriteUpdate({
                id: child.id,
                type: childData.otherType,
                invalidate: ["relationships." + childData.otherName],
            });
            return null;
        }));
    };
    PGStore.prototype.deleteRelationshipItem = function (value, relName, child) {
        var _this = this;
        var schema = this.getSchema(value.type);
        var rel = schema.relationships[relName].type;
        var otherRelName = rel.sides[relName].otherName;
        var sqlData = rel.storeData.sql;
        var childData = schema.relationships[relName].type.sides[relName];
        return Promise.resolve(this.knex(sqlData.tableName)
            .where((_a = {},
            _a[sqlData.joinFields[otherRelName]] = child.id,
            _a[sqlData.joinFields[relName]] = value.id,
            _a))
            .delete()
            .then(function () {
            _this.fireWriteUpdate(Object.assign({}, value, {
                invalidate: ["relationships." + relName],
            }));
            _this.fireWriteUpdate({
                id: child.id,
                type: childData.otherType,
                invalidate: ["relationships." + childData.otherName],
            });
            return null;
        }));
        var _a;
    };
    PGStore.prototype.query = function (type, q) {
        return Promise.resolve(this.knex(type)
            .where(q)
            .select('id')
            .then(function (r) { return r.map(function (v) { return ({ type: type, id: v.id }); }); }));
    };
    return PGStore;
}(plump_1.Storage));
exports.PGStore = PGStore;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
