'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockRead = blockRead;
/* eslint prefer-template: 0*/

function blockRead(Type, knex, query) {
  var selects = [];
  var groups = [];
  var basicJoins = [];
  var rawJoins = [];
  var schema = Type.$fields;
  Object.keys(schema).forEach(function (key) {
    if (schema[key].type === 'hasMany') {
      (function () {
        var joinName = key.toLowerCase();
        var rel = schema[key].relationship;
        if (rel.$sides[key].self.query) {
          rawJoins.push(rel.$sides[key].self.query.rawJoin);
        } else {
          (function () {
            var joinBlock = {
              join: [rel.$name + ' as ' + joinName, joinName + '.' + rel.$sides[key].self.field, '=', Type.$name + '.' + Type.$id],
              where: []
            };
            if (rel.$restrict) {
              Object.keys(rel.$restrict).forEach(function (restriction) {
                joinBlock.where.push([rel.$name + '.' + restriction, '=', rel.$restrict[restriction].value]);
              });
            }
            basicJoins.push(joinBlock);
          })();
        }
        var extraAgg = [];
        if (rel.$extras) {
          Object.keys(rel.$extras).forEach(function (extra) {
            extraAgg.push('\'' + extra + '\'', joinName + '.' + extra);
          });
        }
        selects.push(knex.raw('COALESCE(\n          array_agg(\n            distinct(\n              jsonb_build_object(\n                \'id\', ' + joinName + '.' + rel.$sides[key].other.field + '\n                ' + (extraAgg.length ? ',' + extraAgg.join(',') : '') + '\n              )\n            )\n          )\n          FILTER (WHERE ' + joinName + '.child_id IS NOT NULL),\n          \'{}\')\n        as ' + key));
      })();
    } else {
      selects.push(key);
      groups.push(key);
    }
  });
  var joinedQuery = basicJoins.reduce(function (q, join) {
    return join.where.reduce(function (subQ, where) {
      return subQ.andOn.apply(subQ, where);
    }, q.leftOuterJoin.apply(q, join.join));
  }, knex(Type.$name));
  var evenMoreJoinedQuery = rawJoins.reduce(function (q, join) {
    return q.joinRaw(join);
  }, joinedQuery);
  var selectedQuery = evenMoreJoinedQuery.where(query).select(selects);
  var groupByQuery = selectedQuery.groupBy(groups);
  console.log(groupByQuery.toString());
  return groupByQuery;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2NrUmVhZC5qcyJdLCJuYW1lcyI6WyJibG9ja1JlYWQiLCJUeXBlIiwia25leCIsInF1ZXJ5Iiwic2VsZWN0cyIsImdyb3VwcyIsImJhc2ljSm9pbnMiLCJyYXdKb2lucyIsInNjaGVtYSIsIiRmaWVsZHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInR5cGUiLCJqb2luTmFtZSIsInRvTG93ZXJDYXNlIiwicmVsIiwicmVsYXRpb25zaGlwIiwiJHNpZGVzIiwic2VsZiIsInB1c2giLCJyYXdKb2luIiwiam9pbkJsb2NrIiwiam9pbiIsIiRuYW1lIiwiZmllbGQiLCIkaWQiLCJ3aGVyZSIsIiRyZXN0cmljdCIsInJlc3RyaWN0aW9uIiwidmFsdWUiLCJleHRyYUFnZyIsIiRleHRyYXMiLCJleHRyYSIsInJhdyIsIm90aGVyIiwibGVuZ3RoIiwiam9pbmVkUXVlcnkiLCJyZWR1Y2UiLCJxIiwic3ViUSIsImFuZE9uIiwiYXBwbHkiLCJsZWZ0T3V0ZXJKb2luIiwiZXZlbk1vcmVKb2luZWRRdWVyeSIsImpvaW5SYXciLCJzZWxlY3RlZFF1ZXJ5Iiwic2VsZWN0IiwiZ3JvdXBCeVF1ZXJ5IiwiZ3JvdXBCeSIsImNvbnNvbGUiLCJsb2ciLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFFZ0JBLFMsR0FBQUEsUztBQUZoQjs7QUFFTyxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsSUFBekIsRUFBK0JDLEtBQS9CLEVBQXNDO0FBQzNDLE1BQU1DLFVBQVUsRUFBaEI7QUFDQSxNQUFNQyxTQUFTLEVBQWY7QUFDQSxNQUFNQyxhQUFhLEVBQW5CO0FBQ0EsTUFBTUMsV0FBVyxFQUFqQjtBQUNBLE1BQU1DLFNBQVNQLEtBQUtRLE9BQXBCO0FBQ0FDLFNBQU9DLElBQVAsQ0FBWUgsTUFBWixFQUFvQkksT0FBcEIsQ0FBNEIsVUFBQ0MsR0FBRCxFQUFTO0FBQ25DLFFBQUlMLE9BQU9LLEdBQVAsRUFBWUMsSUFBWixLQUFxQixTQUF6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dEI7QUFDQSxNQUFNNkMsZUFBZUYsY0FBY0csT0FBZCxDQUFzQjdDLE1BQXRCLENBQXJCO0FBQ0E4QyxVQUFRQyxHQUFSLENBQVlILGFBQWFJLFFBQWIsRUFBWjtBQUNBLFNBQU9KLFlBQVA7QUFDRCIsImZpbGUiOiJibG9ja1JlYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgcHJlZmVyLXRlbXBsYXRlOiAwKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrUmVhZChUeXBlLCBrbmV4LCBxdWVyeSkge1xuICBjb25zdCBzZWxlY3RzID0gW107XG4gIGNvbnN0IGdyb3VwcyA9IFtdO1xuICBjb25zdCBiYXNpY0pvaW5zID0gW107XG4gIGNvbnN0IHJhd0pvaW5zID0gW107XG4gIGNvbnN0IHNjaGVtYSA9IFR5cGUuJGZpZWxkcztcbiAgT2JqZWN0LmtleXMoc2NoZW1hKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoc2NoZW1hW2tleV0udHlwZSA9PT0gJ2hhc01hbnknKSB7XG4gICAgICBjb25zdCBqb2luTmFtZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgcmVsID0gc2NoZW1hW2tleV0ucmVsYXRpb25zaGlwO1xuICAgICAgaWYgKHJlbC4kc2lkZXNba2V5XS5zZWxmLnF1ZXJ5KSB7XG4gICAgICAgIHJhd0pvaW5zLnB1c2gocmVsLiRzaWRlc1trZXldLnNlbGYucXVlcnkucmF3Sm9pbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBqb2luQmxvY2sgPSB7XG4gICAgICAgICAgam9pbjogW1xuICAgICAgICAgICAgYCR7cmVsLiRuYW1lfSBhcyAke2pvaW5OYW1lfWAsXG4gICAgICAgICAgICBgJHtqb2luTmFtZX0uJHtyZWwuJHNpZGVzW2tleV0uc2VsZi5maWVsZH1gLFxuICAgICAgICAgICAgJz0nLFxuICAgICAgICAgICAgYCR7VHlwZS4kbmFtZX0uJHtUeXBlLiRpZH1gLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgd2hlcmU6IFtdLFxuICAgICAgICB9O1xuICAgICAgICBpZiAocmVsLiRyZXN0cmljdCkge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHJlbC4kcmVzdHJpY3QpLmZvckVhY2goKHJlc3RyaWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBqb2luQmxvY2sud2hlcmUucHVzaChcbiAgICAgICAgICAgICAgW2Ake3JlbC4kbmFtZX0uJHtyZXN0cmljdGlvbn1gLCAnPScsIHJlbC4kcmVzdHJpY3RbcmVzdHJpY3Rpb25dLnZhbHVlXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBiYXNpY0pvaW5zLnB1c2goam9pbkJsb2NrKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV4dHJhQWdnID0gW107XG4gICAgICBpZiAocmVsLiRleHRyYXMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMocmVsLiRleHRyYXMpLmZvckVhY2goKGV4dHJhKSA9PiB7XG4gICAgICAgICAgZXh0cmFBZ2cucHVzaChgJyR7ZXh0cmF9J2AsIGAke2pvaW5OYW1lfS4ke2V4dHJhfWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdHMucHVzaChrbmV4LnJhdyhcbiAgICAgICAgYENPQUxFU0NFKFxuICAgICAgICAgIGFycmF5X2FnZyhcbiAgICAgICAgICAgIGRpc3RpbmN0KFxuICAgICAgICAgICAgICBqc29uYl9idWlsZF9vYmplY3QoXG4gICAgICAgICAgICAgICAgJ2lkJywgJHtqb2luTmFtZX0uJHtyZWwuJHNpZGVzW2tleV0ub3RoZXIuZmllbGR9XG4gICAgICAgICAgICAgICAgJHtleHRyYUFnZy5sZW5ndGggPyAnLCcgKyBleHRyYUFnZy5qb2luKCcsJykgOiAnJ31cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgICBGSUxURVIgKFdIRVJFICR7am9pbk5hbWV9LmNoaWxkX2lkIElTIE5PVCBOVUxMKSxcbiAgICAgICAgICAne30nKVxuICAgICAgICBhcyAke2tleX1gXG4gICAgICApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0cy5wdXNoKGtleSk7XG4gICAgICBncm91cHMucHVzaChrZXkpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGpvaW5lZFF1ZXJ5ID0gYmFzaWNKb2lucy5yZWR1Y2UoKHEsIGpvaW4pID0+IHtcbiAgICByZXR1cm4gam9pbi53aGVyZS5yZWR1Y2UoKHN1YlEsIHdoZXJlKSA9PiBzdWJRLmFuZE9uLmFwcGx5KHN1YlEsIHdoZXJlKSwgcS5sZWZ0T3V0ZXJKb2luLmFwcGx5KHEsIGpvaW4uam9pbikpO1xuICB9LCBrbmV4KFR5cGUuJG5hbWUpKTtcbiAgY29uc3QgZXZlbk1vcmVKb2luZWRRdWVyeSA9IHJhd0pvaW5zLnJlZHVjZSgocSwgam9pbikgPT4gcS5qb2luUmF3KGpvaW4pLCBqb2luZWRRdWVyeSk7XG4gIGNvbnN0IHNlbGVjdGVkUXVlcnkgPSBldmVuTW9yZUpvaW5lZFF1ZXJ5LndoZXJlKHF1ZXJ5KS5zZWxlY3Qoc2VsZWN0cyk7XG4gIGNvbnN0IGdyb3VwQnlRdWVyeSA9IHNlbGVjdGVkUXVlcnkuZ3JvdXBCeShncm91cHMpO1xuICBjb25zb2xlLmxvZyhncm91cEJ5UXVlcnkudG9TdHJpbmcoKSk7XG4gIHJldHVybiBncm91cEJ5UXVlcnk7XG59XG4iXX0=
