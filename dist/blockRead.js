'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockRead = blockRead;
/* eslint prefer-template: 0*/

function deserializeWhereIntoJoin(query, block, joinName, fieldName, knex, Type) {
  // const car = block[0];
  // the query uses 'where', but we want to use 'on' instead
  var cdr = block.slice(1);
  if (Array.isArray(cdr[0])) {
    return cdr.reduce(function (subQuery, subBlock) {
      return deserializeWhereIntoJoin(subQuery, subBlock, joinName, fieldName, knex, Type);
    }, query);
  } else {
    cdr[0] = joinName + '.' + cdr[0];
    if (cdr[2] === '{id}') {
      cdr[2] = Type.$name + '.' + Type.$id;
    } else {
      cdr[2] = knex.raw('\'' + cdr[2] + '\'');
    }
    return query.on.apply(query, cdr);
  }
}

function blockRead(Type, knex, query) {
  var selects = [];
  var groups = [];
  var basicJoins = [];
  var fancyJoins = [];
  var schema = Type.$schema;
  Object.keys(schema).forEach(function (key) {
    if (schema[key].type === 'hasMany') {
      var joinName = key.toLowerCase();
      var rel = schema[key].relationship;
      if (rel.$sides[key].self.query) {
        fancyJoins.push({
          logic: rel.$sides[key].self.query.logic,
          table: rel.$name + ' as ' + joinName,
          joinName: joinName,
          fieldName: rel.$sides[key].other.field
        });
      } else {
        var joinBlock = {
          join: [rel.$name + ' as ' + joinName, joinName + '.' + rel.$sides[key].self.field, '=', Type.$name + '.' + Type.$id],
          where: []
        };
        if (rel.$restrict) {
          Object.keys(rel.$restrict).forEach(function (restriction) {
            joinBlock.where.push([joinName + '.' + restriction, '=', knex.raw('\'' + rel.$restrict[restriction].value + '\'')]);
          });
        }
        basicJoins.push(joinBlock);
      }
      var extraAgg = [];
      if (rel.$extras) {
        Object.keys(rel.$extras).forEach(function (extra) {
          extraAgg.push('\'' + extra + '\'', joinName + '.' + extra);
        });
      }
      selects.push(knex.raw('COALESCE(\n          array_agg(\n            distinct(\n              jsonb_build_object(\n                \'id\', ' + joinName + '.' + rel.$sides[key].other.field + '\n                ' + (extraAgg.length ? ',' + extraAgg.join(',') : '') + '\n              )\n            )\n          )\n          FILTER (WHERE ' + joinName + '.' + rel.$sides[key].other.field + ' IS NOT NULL),\n          \'{}\')\n        as ' + key));
    } else {
      selects.push(key);
      groups.push(key);
    }
  });
  var joinedQuery = basicJoins.reduce(function (q, join) {
    return q.leftOuterJoin(join.join[0], function (qb) {
      qb.on(join.join[1], join.join[2], join.join[3]);
      join.where.forEach(function (where) {
        return qb.andOn.apply(qb, where);
      });
    });
  }, knex(Type.$name));

  var evenMoreJoinedQuery = fancyJoins.reduce(function (q, join) {
    return q.leftOuterJoin(join.table, function (qb) {
      return deserializeWhereIntoJoin(qb, join.logic, join.joinName, join.fieldName, knex, Type);
    });
  }, joinedQuery);
  var selectedQuery = evenMoreJoinedQuery.where(query).select(selects);
  var groupByQuery = selectedQuery.groupBy(groups);
  // console.log(groupByQuery.toString());
  return groupByQuery;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
