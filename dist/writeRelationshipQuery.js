"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function writeRelationshipQuery(schema, relName) {
    var rel = schema.relationships[relName].type;
    var otherRelName = rel.sides[relName].otherName;
    var sqlData = rel.storeData.sql;
    if (rel.extras) {
        var extraArray = Object.keys(rel.extras).concat();
        var insertArray = [
            sqlData.joinFields[otherRelName],
            sqlData.joinFields[relName],
        ].concat(extraArray);
        var insertString = "insert into \"" + sqlData.tableName + "\" (" + insertArray.join(', ') + ")\n      values (" + insertArray.map(function () { return '?'; }).join(', ') + ")\n      on conflict (\"" + sqlData.joinFields[otherRelName] + "\", \"" + sqlData.joinFields[relName] + "\") ";
        return {
            queryString: insertString + " do update set " + extraArray
                .map(function (v) { return v + " = ?"; })
                .join(', ') + ";",
            fields: ['child.id', 'item.id'].concat(extraArray).concat(extraArray),
        };
    }
    else {
        var insertArray = [
            sqlData.joinFields[otherRelName],
            sqlData.joinFields[relName],
        ];
        var insertString = "insert into \"" + sqlData.tableName + "\" (" + insertArray.join(', ') + ")\n      values (" + insertArray.map(function () { return '?'; }).join(', ') + ")\n      on conflict (\"" + sqlData.joinFields[otherRelName] + "\", \"" + sqlData.joinFields[relName] + "\") ";
        return {
            queryString: insertString + " do nothing;",
            fields: ['child.id', 'item.id'],
        };
    }
}
exports.writeRelationshipQuery = writeRelationshipQuery;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93cml0ZVJlbGF0aW9uc2hpcFF1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsZ0NBQ0UsTUFBbUIsRUFDbkIsT0FBZTtJQUVmLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQy9DLElBQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2xELElBQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEQsSUFBTSxXQUFXLEdBQUc7WUFDbEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7WUFDaEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7U0FDNUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckIsSUFBTSxZQUFZLEdBQUcsbUJBQWdCLE9BQU8sQ0FBQyxTQUFTLFlBQU0sV0FBVyxDQUFDLElBQUksQ0FDMUUsSUFBSSxDQUNMLHlCQUNXLFdBQVcsQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLEdBQUcsRUFBSCxDQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUMvQixPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxjQUFPLE9BQU8sQ0FBQyxVQUFVLENBQ3pFLE9BQU8sQ0FDUixTQUFLLENBQUM7UUFDUCxNQUFNLENBQUM7WUFDTCxXQUFXLEVBQUssWUFBWSx1QkFBa0IsVUFBVTtpQkFDckQsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUcsQ0FBQyxTQUFNLEVBQVYsQ0FBVSxDQUFDO2lCQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUc7WUFDaEIsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1NBQ3RFLENBQUM7SUFDSixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixJQUFNLFdBQVcsR0FBRztZQUNsQixPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQztZQUNoQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztTQUM1QixDQUFDO1FBQ0YsSUFBTSxZQUFZLEdBQUcsbUJBQWdCLE9BQU8sQ0FBQyxTQUFTLFlBQU0sV0FBVyxDQUFDLElBQUksQ0FDMUUsSUFBSSxDQUNMLHlCQUNXLFdBQVcsQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLEdBQUcsRUFBSCxDQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUMvQixPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxjQUFPLE9BQU8sQ0FBQyxVQUFVLENBQ3pFLE9BQU8sQ0FDUixTQUFLLENBQUM7UUFDUCxNQUFNLENBQUM7WUFDTCxXQUFXLEVBQUssWUFBWSxpQkFBYztZQUMxQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDO1NBQ2hDLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQztBQTVDRCx3REE0Q0MiLCJmaWxlIjoid3JpdGVSZWxhdGlvbnNoaXBRdWVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGVsU2NoZW1hIH0gZnJvbSAncGx1bXAnO1xuaW1wb3J0IHsgUGFyYW1ldGVyaXplZFF1ZXJ5IH0gZnJvbSAnLi9zZW1pUXVlcnknO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVSZWxhdGlvbnNoaXBRdWVyeShcbiAgc2NoZW1hOiBNb2RlbFNjaGVtYSxcbiAgcmVsTmFtZTogc3RyaW5nLFxuKTogUGFyYW1ldGVyaXplZFF1ZXJ5IHtcbiAgY29uc3QgcmVsID0gc2NoZW1hLnJlbGF0aW9uc2hpcHNbcmVsTmFtZV0udHlwZTtcbiAgY29uc3Qgb3RoZXJSZWxOYW1lID0gcmVsLnNpZGVzW3JlbE5hbWVdLm90aGVyTmFtZTtcbiAgY29uc3Qgc3FsRGF0YSA9IHJlbC5zdG9yZURhdGEuc3FsO1xuXG4gIGlmIChyZWwuZXh0cmFzKSB7XG4gICAgY29uc3QgZXh0cmFBcnJheSA9IE9iamVjdC5rZXlzKHJlbC5leHRyYXMpLmNvbmNhdCgpO1xuICAgIGNvbnN0IGluc2VydEFycmF5ID0gW1xuICAgICAgc3FsRGF0YS5qb2luRmllbGRzW290aGVyUmVsTmFtZV0sXG4gICAgICBzcWxEYXRhLmpvaW5GaWVsZHNbcmVsTmFtZV0sXG4gICAgXS5jb25jYXQoZXh0cmFBcnJheSk7XG4gICAgY29uc3QgaW5zZXJ0U3RyaW5nID0gYGluc2VydCBpbnRvIFwiJHtzcWxEYXRhLnRhYmxlTmFtZX1cIiAoJHtpbnNlcnRBcnJheS5qb2luKFxuICAgICAgJywgJyxcbiAgICApfSlcbiAgICAgIHZhbHVlcyAoJHtpbnNlcnRBcnJheS5tYXAoKCkgPT4gJz8nKS5qb2luKCcsICcpfSlcbiAgICAgIG9uIGNvbmZsaWN0IChcIiR7c3FsRGF0YS5qb2luRmllbGRzW290aGVyUmVsTmFtZV19XCIsIFwiJHtzcWxEYXRhLmpvaW5GaWVsZHNbXG4gICAgICByZWxOYW1lXG4gICAgXX1cIikgYDtcbiAgICByZXR1cm4ge1xuICAgICAgcXVlcnlTdHJpbmc6IGAke2luc2VydFN0cmluZ30gZG8gdXBkYXRlIHNldCAke2V4dHJhQXJyYXlcbiAgICAgICAgLm1hcCh2ID0+IGAke3Z9ID0gP2ApXG4gICAgICAgIC5qb2luKCcsICcpfTtgLFxuICAgICAgZmllbGRzOiBbJ2NoaWxkLmlkJywgJ2l0ZW0uaWQnXS5jb25jYXQoZXh0cmFBcnJheSkuY29uY2F0KGV4dHJhQXJyYXkpLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW5zZXJ0QXJyYXkgPSBbXG4gICAgICBzcWxEYXRhLmpvaW5GaWVsZHNbb3RoZXJSZWxOYW1lXSxcbiAgICAgIHNxbERhdGEuam9pbkZpZWxkc1tyZWxOYW1lXSxcbiAgICBdO1xuICAgIGNvbnN0IGluc2VydFN0cmluZyA9IGBpbnNlcnQgaW50byBcIiR7c3FsRGF0YS50YWJsZU5hbWV9XCIgKCR7aW5zZXJ0QXJyYXkuam9pbihcbiAgICAgICcsICcsXG4gICAgKX0pXG4gICAgICB2YWx1ZXMgKCR7aW5zZXJ0QXJyYXkubWFwKCgpID0+ICc/Jykuam9pbignLCAnKX0pXG4gICAgICBvbiBjb25mbGljdCAoXCIke3NxbERhdGEuam9pbkZpZWxkc1tvdGhlclJlbE5hbWVdfVwiLCBcIiR7c3FsRGF0YS5qb2luRmllbGRzW1xuICAgICAgcmVsTmFtZVxuICAgIF19XCIpIGA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHF1ZXJ5U3RyaW5nOiBgJHtpbnNlcnRTdHJpbmd9IGRvIG5vdGhpbmc7YCxcbiAgICAgIGZpZWxkczogWydjaGlsZC5pZCcsICdpdGVtLmlkJ10sXG4gICAgfTtcbiAgfVxufVxuIl19
