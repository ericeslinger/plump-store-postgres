"use strict";
exports.__esModule = true;
function writeRelationshipQuery(schema, relName) {
    var rel = schema.relationships[relName].type;
    var otherRelName = rel.sides[relName].otherName;
    var sqlData = rel.storeData.sql;
    if (rel.extras) {
        var extraArray = Object.keys(rel.extras).concat();
        var insertArray = [
            sqlData.joinFields[otherRelName],
            sqlData.joinFields[relName],
        ].concat(extraArray);
        var insertString = "insert into \"" + sqlData.tableName + "\" (" + insertArray.join(', ') + ")\n      values (" + insertArray.map(function () { return '?'; }).join(', ') + ")\n      on conflict (\"" + sqlData.joinFields[otherRelName] + "\", \"" + sqlData.joinFields[relName] + "\") ";
        return {
            queryString: insertString + " do update set " + extraArray.map(function (v) { return v + " = ?"; }).join(', ') + ";",
            fields: ['child.id', 'item.id'].concat(extraArray).concat(extraArray)
        };
    }
    else {
        var insertArray = [
            sqlData.joinFields[otherRelName],
            sqlData.joinFields[relName],
        ];
        var insertString = "insert into \"" + sqlData.tableName + "\" (" + insertArray.join(', ') + ")\n      values (" + insertArray.map(function () { return '?'; }).join(', ') + ")\n      on conflict (\"" + sqlData.joinFields[otherRelName] + "\", \"" + sqlData.joinFields[relName] + "\") ";
        return {
            queryString: insertString + " do nothing;",
            fields: ['child.id', 'item.id']
        };
    }
}
exports.writeRelationshipQuery = writeRelationshipQuery;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlUmVsYXRpb25zaGlwUXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxnQ0FBdUMsTUFBbUIsRUFBRSxPQUFlO0lBQ3pFLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQy9DLElBQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2xELElBQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEQsSUFBTSxXQUFXLEdBQUc7WUFDbEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7WUFDaEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7U0FDNUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckIsSUFBTSxZQUFZLEdBQUcsbUJBQWdCLE9BQU8sQ0FBQyxTQUFTLFlBQU0sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQ3RFLFdBQVcsQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLEdBQUcsRUFBSCxDQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUMvQixPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxjQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQUssQ0FBQztRQUMxRixNQUFNLENBQUM7WUFDTCxXQUFXLEVBQUssWUFBWSx1QkFBa0IsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFHLENBQUMsU0FBTSxFQUFWLENBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBRztZQUMzRixNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDdEUsQ0FBQztJQUNKLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLElBQU0sV0FBVyxHQUFHO1lBQ2xCLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1NBQzVCLENBQUM7UUFDRixJQUFNLFlBQVksR0FBRyxtQkFBZ0IsT0FBTyxDQUFDLFNBQVMsWUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFDdEUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxjQUFNLE9BQUEsR0FBRyxFQUFILENBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0NBQy9CLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLGNBQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBSyxDQUFDO1FBQzFGLE1BQU0sQ0FBQztZQUNMLFdBQVcsRUFBSyxZQUFZLGlCQUFjO1lBQzFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUM7U0FDaEMsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDO0FBL0JELHdEQStCQyIsImZpbGUiOiJ3cml0ZVJlbGF0aW9uc2hpcFF1ZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kZWxTY2hlbWEgfSBmcm9tICdwbHVtcCc7XG5pbXBvcnQgeyBQYXJhbWV0ZXJpemVkUXVlcnkgfSBmcm9tICcuL3NlbWlRdWVyeSc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVJlbGF0aW9uc2hpcFF1ZXJ5KHNjaGVtYTogTW9kZWxTY2hlbWEsIHJlbE5hbWU6IHN0cmluZyk6IFBhcmFtZXRlcml6ZWRRdWVyeSB7XG4gIGNvbnN0IHJlbCA9IHNjaGVtYS5yZWxhdGlvbnNoaXBzW3JlbE5hbWVdLnR5cGU7XG4gIGNvbnN0IG90aGVyUmVsTmFtZSA9IHJlbC5zaWRlc1tyZWxOYW1lXS5vdGhlck5hbWU7XG4gIGNvbnN0IHNxbERhdGEgPSByZWwuc3RvcmVEYXRhLnNxbDtcblxuICBpZiAocmVsLmV4dHJhcykge1xuICAgIGNvbnN0IGV4dHJhQXJyYXkgPSBPYmplY3Qua2V5cyhyZWwuZXh0cmFzKS5jb25jYXQoKTtcbiAgICBjb25zdCBpbnNlcnRBcnJheSA9IFtcbiAgICAgIHNxbERhdGEuam9pbkZpZWxkc1tvdGhlclJlbE5hbWVdLFxuICAgICAgc3FsRGF0YS5qb2luRmllbGRzW3JlbE5hbWVdLFxuICAgIF0uY29uY2F0KGV4dHJhQXJyYXkpO1xuICAgIGNvbnN0IGluc2VydFN0cmluZyA9IGBpbnNlcnQgaW50byBcIiR7c3FsRGF0YS50YWJsZU5hbWV9XCIgKCR7aW5zZXJ0QXJyYXkuam9pbignLCAnKX0pXG4gICAgICB2YWx1ZXMgKCR7aW5zZXJ0QXJyYXkubWFwKCgpID0+ICc/Jykuam9pbignLCAnKX0pXG4gICAgICBvbiBjb25mbGljdCAoXCIke3NxbERhdGEuam9pbkZpZWxkc1tvdGhlclJlbE5hbWVdfVwiLCBcIiR7c3FsRGF0YS5qb2luRmllbGRzW3JlbE5hbWVdfVwiKSBgO1xuICAgIHJldHVybiB7XG4gICAgICBxdWVyeVN0cmluZzogYCR7aW5zZXJ0U3RyaW5nfSBkbyB1cGRhdGUgc2V0ICR7ZXh0cmFBcnJheS5tYXAodiA9PiBgJHt2fSA9ID9gKS5qb2luKCcsICcpfTtgLFxuICAgICAgZmllbGRzOiBbJ2NoaWxkLmlkJywgJ2l0ZW0uaWQnXS5jb25jYXQoZXh0cmFBcnJheSkuY29uY2F0KGV4dHJhQXJyYXkpLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW5zZXJ0QXJyYXkgPSBbXG4gICAgICBzcWxEYXRhLmpvaW5GaWVsZHNbb3RoZXJSZWxOYW1lXSxcbiAgICAgIHNxbERhdGEuam9pbkZpZWxkc1tyZWxOYW1lXSxcbiAgICBdO1xuICAgIGNvbnN0IGluc2VydFN0cmluZyA9IGBpbnNlcnQgaW50byBcIiR7c3FsRGF0YS50YWJsZU5hbWV9XCIgKCR7aW5zZXJ0QXJyYXkuam9pbignLCAnKX0pXG4gICAgICB2YWx1ZXMgKCR7aW5zZXJ0QXJyYXkubWFwKCgpID0+ICc/Jykuam9pbignLCAnKX0pXG4gICAgICBvbiBjb25mbGljdCAoXCIke3NxbERhdGEuam9pbkZpZWxkc1tvdGhlclJlbE5hbWVdfVwiLCBcIiR7c3FsRGF0YS5qb2luRmllbGRzW3JlbE5hbWVdfVwiKSBgO1xuICAgIHJldHVybiB7XG4gICAgICBxdWVyeVN0cmluZzogYCR7aW5zZXJ0U3RyaW5nfSBkbyBub3RoaW5nO2AsXG4gICAgICBmaWVsZHM6IFsnY2hpbGQuaWQnLCAnaXRlbS5pZCddLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==
